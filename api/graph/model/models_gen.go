// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Blob interface {
	IsBlob()
}

type Entity interface {
	IsEntity()
}

type ACLCursor struct {
	Results []*ACL  `json:"results"`
	Cursor  *Cursor `json:"cursor"`
}

type Artifact struct {
	ID         int         `json:"id"`
	Created    time.Time   `json:"created"`
	Repository *Repository `json:"repository"`
	Filename   string      `json:"filename"`
	Checksum   string      `json:"checksum"`
	Size       int         `json:"size"`
	URL        string      `json:"url"`
}

type CommitCursor struct {
	Results []*Commit `json:"results"`
	Cursor  *Cursor   `json:"cursor"`
}

type Filter struct {
	Count  *int    `json:"count"`
	Search *string `json:"search"`
}

type ReferenceCursor struct {
	Results []*Reference `json:"results"`
	Cursor  *Cursor      `json:"cursor"`
}

type RepoInput struct {
	Name        string      `json:"name"`
	Description *string     `json:"description"`
	Visibility  *Visibility `json:"visibility"`
}

type RepositoryCursor struct {
	Results []*Repository `json:"results"`
	Cursor  *Cursor       `json:"cursor"`
}

type Signature struct {
	Name  string    `json:"name"`
	Email string    `json:"email"`
	Time  time.Time `json:"time"`
}

type Tag struct {
	Type    ObjectType `json:"type"`
	ID      string     `json:"id"`
	ShortID string     `json:"shortId"`
	Raw     string     `json:"raw"`
	Target  Object     `json:"target"`
	Name    string     `json:"name"`
	Tagger  *Signature `json:"tagger"`
	Message *string    `json:"message"`
}

func (Tag) IsObject() {}

type TreeEntryCursor struct {
	Results []*TreeEntry `json:"results"`
	Cursor  *Cursor      `json:"cursor"`
}

type Version struct {
	Major           int        `json:"major"`
	Minor           int        `json:"minor"`
	Patch           int        `json:"patch"`
	DeprecationDate *time.Time `json:"deprecationDate"`
}

type AccessMode string

const (
	AccessModeRo AccessMode = "RO"
	AccessModeRw AccessMode = "RW"
)

var AllAccessMode = []AccessMode{
	AccessModeRo,
	AccessModeRw,
}

func (e AccessMode) IsValid() bool {
	switch e {
	case AccessModeRo, AccessModeRw:
		return true
	}
	return false
}

func (e AccessMode) String() string {
	return string(e)
}

func (e *AccessMode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccessMode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccessMode", str)
	}
	return nil
}

func (e AccessMode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ObjectType string

const (
	ObjectTypeCommit ObjectType = "COMMIT"
	ObjectTypeTree   ObjectType = "TREE"
	ObjectTypeBlob   ObjectType = "BLOB"
	ObjectTypeTag    ObjectType = "TAG"
)

var AllObjectType = []ObjectType{
	ObjectTypeCommit,
	ObjectTypeTree,
	ObjectTypeBlob,
	ObjectTypeTag,
}

func (e ObjectType) IsValid() bool {
	switch e {
	case ObjectTypeCommit, ObjectTypeTree, ObjectTypeBlob, ObjectTypeTag:
		return true
	}
	return false
}

func (e ObjectType) String() string {
	return string(e)
}

func (e *ObjectType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ObjectType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ObjectType", str)
	}
	return nil
}

func (e ObjectType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Visibility string

const (
	VisibilityPublic   Visibility = "PUBLIC"
	VisibilityUnlisted Visibility = "UNLISTED"
	VisibilityPrivate  Visibility = "PRIVATE"
)

var AllVisibility = []Visibility{
	VisibilityPublic,
	VisibilityUnlisted,
	VisibilityPrivate,
}

func (e Visibility) IsValid() bool {
	switch e {
	case VisibilityPublic, VisibilityUnlisted, VisibilityPrivate:
		return true
	}
	return false
}

func (e Visibility) String() string {
	return string(e)
}

func (e *Visibility) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Visibility(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Visibility", str)
	}
	return nil
}

func (e Visibility) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
