scalar Time
scalar Upload

# Representation of a semantic API version
# https://semver.org
type Version {
  major: Int!
  minor: Int!
  patch: Int!
  # If this API version is scheduled for deprecation, this is the date on which
  # it will stop working
  deprecationDate: Time
}

# Access mode for an ACL entry
enum AccessMode {
  # Read-only
  RO
  # Read/write
  RW
}

# Visibility of a git repository to others
enum Visibility {
  # Visible to everyone, listed on your profile
  PUBLIC
  # Visible to everyone (if they know the URL), not listed on your profile
  UNLISTED
  # Not visible to anyone except those explicitly added to the access list
  PRIVATE
}

# An entity can have ownership over resources
interface Entity {
  id: Int!
  created: Time!
  updated: Time!
  # The canonical name of this entity. For users, this is their username
  # prefixed with '~'. Additional entity types will be supported in the future.
  canonicalName: String!

  # A list of repositories owned by this entity
  repositories(count: Int = 10, next: Int, filter: FilterBy): [Repository]!
}

# A registered user
type User implements Entity {
  id: Int!
  created: Time!
  updated: Time!
  canonicalName: String!
  username: String!
  email: String!
  url: String
  location: String
  bio: String

  # A list of repositories owned by this user
  repositories(count: Int = 10, next: Int, filter: FilterBy): [Repository]!
}

# A git repository
type Repository {
  id: Int!
  created: Time!
  updated: Time!
  owner: Entity!
  name: String!
  description: String
  visibility: Visibility!

  # If this repository was cloned from another, this will be set to the
  # original clone URL
  upstreamUrl: String

  # Returns access control list entries for this repository
  accessControlList(count: Int = 10, from: Int): [ACL]!

  ## Plumbing API:

  # Returns a list of references for this repository
  # 
  # glob: an optional string to filter the list of references, e.g. for tags
  # use "refs/tags/*", or leave null to enumerate all references
  references(count: Int = 10, next: String, glob: String): [Reference]!

  # Returns a list of objects for this repository by their IDs (using fully
  # qualified git object IDs, 40 character hex strings)
  objects(ids: [String]): [Object]!

  ## Porcelain API:

  # NOTE: revspecs are git-compatible, e.g. "HEAD~4", "master", "9790b10")
  # To fetch the next page, pass revspec="9790b10~1" where 9790b10 is the last
  # SHA in the log
  
  # The HEAD reference for this repository (equivalent to the default branch)
  HEAD: Reference

  # Returns a list of comments, starting from revspec
  log(revspec: String = "HEAD", count: Int = 10): [Commit]!

  # Returns the tree for a given revspec
  #
  # path: optional path to the tree to retrieve
  tree(revspec: String = "HEAD", path: String): Tree

  # Returns a blob for a given path and revspec
  file(revspec: String = "HEAD", path: String!): Blob

  # Returns the object for a given revspec. Useful, for example, to turn
  # something ambiuguous like "9790b10" into a commit object
  revparse_single(revspec: String!): Object
}

# Access Control List entry
type ACL {
  id: Int!
  created: Time!
  repository: Repository!
  entity: Entity!
  mode: AccessMode
}

# Arbitrary file attached to a git repository
type Artifact {
  id: Int!
  created: Time!
  repository: Repository!
  filename: String!
  checksum: String!
  size: Int!
  url: String!
}

type Reference {
  name: String!
  target: String!
  follow: Object
}

enum ObjectType {
  COMMIT
  TREE
  BLOB
  TAG
}

interface Object {
  type: ObjectType!
  id: String!
  shortId: String!
  # Raw git object, base64 encoded
  raw: String!
}

type Signature {
  name: String!
  email: String!
  time: Time!
}

type Commit implements Object {
  type: ObjectType!
  id: String!
  shortId: String!
  raw: String!
  author: Signature!
  committer: Signature!
  message: String!
  tree: Tree!
  parents: [Commit!]!
}

type Tree implements Object {
  type: ObjectType!
  id: String!
  shortId: String!
  raw: String!
  entries(count: Int = 100, next: String): [TreeEntry!]!

  entry(path: String): TreeEntry
}

type TreeEntry {
  id: String!
  name: String!
  object: Object!
  # Unix-style file mode, i.e. 0755 or 0644 (octal)
  mode: Int!
}

enum BlobType {
  BINARY
  TEXT
}

type BinaryBlob {
  # TODO: Consdier adding a range specifier
  base64: String!
}

type TextBlob {
  # TODO: Consdier adding a range specifier
  text: String!
}

union BlobData = BinaryBlob | TextBlob

type Blob implements Object {
  type: ObjectType!
  id: String!
  shortId: String!
  raw: String!
  blobType: BlobType!
  data: BlobData
}

type Tag implements Object {
  type: ObjectType!
  id: String!
  shortId: String!
  raw: String!
  target: Object!
  name: String!
  tagger: Signature!
  message: String
}

# Specifies filtering criteria for a listing query
input FilterBy {
  # Same search syntax as searching on the web UI
  terms: String!
}

type Query {
  # Returns API version information
  version: Version!

  # Returns the authenticated user
  me: User!

  # Returns a specific user
  user(username: String!): User

  # Returns repositories that the authenticated user has access to
  # NOTE: in this version of the API, only repositories owned by the
  # authenticated user are returned, but in the future the default behavior
  # will be to return all repositories that the user either (1) has been given
  # explicit access to via ACLs or (2) has implicit access to either by
  # ownership or group membership.
  repositories(next: Int, filter: FilterBy): [Repository]!

  # Returns a specific repository
  repository(id: Int!): Repository

  # Returns a specific repository, owned by the authenticated user.
  repositoryByName(name: String!): Repository

  # Returns a specific repository, owned by the given canonical name (e.g.
  # "~sircmpwn").
  repositoryByOwner(owner: String!, repo: String!): Repository
}

# Details for repository creation or updates
input RepoInput {
  name: String!
  description: String
  visibility: Visibility
}

type Mutation {
  # Creates a new repository
  createRepository(params: RepoInput): Repository!

  # Updates repository information
  updateRepository(id: ID!, params: RepoInput): Repository!

  # Deletes a repository and returns the deleted repository
  deleteRepository(id: ID!): Repository!

  # Creates a new ACL or updates an existing ACL for the given entity ID
  updateACL(repoId: ID!, mode: AccessMode!, entity: ID!): ACL!

  # Deletes the ACL for the given entity ID and returns the deleted ACL
  deleteACL(repoId: Int!, entity: ID!): ACL!

  # Uploads a new artifact, attaching it to the given revspec
  uploadArtifact(repoId: Int!, revspec: String!, file: Upload!): Artifact!

  # Deletes an artifact
  deleteArtifact(id: Int!): Artifact!
}
