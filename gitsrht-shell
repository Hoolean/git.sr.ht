#!/usr/bin/env python3
import sys
import os
try:
    f = open("/var/log/git-srht-shell", "a")
    os.close(sys.stderr.fileno())
    os.dup2(f.fileno(), sys.stderr.fileno())
except Exception as ex:
    sys.stderr.write("Unable to open log for writing\n")
    sys.stderr.write(str(ex) + "\n")
import json
import requests
import shlex
from datetime import datetime
from srht.config import cfg, get_origin
from srht.crypto import sign_payload
from srht.validation import Validation

def log(s, *args):
    sys.stderr.write("{} {}\n".format(datetime.now().isoformat(),
        s.format(*args) if isinstance(s, str) else str(s)))

origin = get_origin("git.sr.ht")
repos = cfg("git.sr.ht", "repos")

_cmd = os.environ.get("SSH_ORIGINAL_COMMAND")
if not _cmd:
    _cmd = ""
if len(sys.argv) < 2:
    log("Error: expected 2 arguments from SSH")
    sys.exit(1)
user_id = int(sys.argv[1])
username = sys.argv[2]
ssh_key = sys.argv[3]

log("User: {}", username)

cmd = shlex.split(_cmd)
valid_commands = ["git-receive-pack", "git-upload-pack", "git-upload-archive"]
if len(cmd) < 1 or not cmd[0] in valid_commands:
    log("Not permitting unacceptable command")
    print("Hi {}! You've successfully authenticated, ".format(username) +
        "but I do not provide an interactive shell. Bye!")
    sys.exit(128)
os.chdir(repos)
path = os.path.abspath(cmd[-1])
if not path.startswith(repos):
    path = os.path.join(repos, path)
cmd[-1] = path

# Delegate to web application for validation
payload = {
    "path": path,
    "user_id": user_id,
    # 2 is write, 1 is read
    "access": 2 if cmd[0] == "git-receive-pack" else 1,
}
payload = json.dumps(payload)
headers = {
    "Content-Type": "application/json",
}
headers.update(sign_payload(payload))
r = requests.post(f"{origin}/internal/push-check",
        data=payload, headers=headers)
sys.stderr.write(r.text + "\n")
response = r.json()
if r.status_code == 302:
    print("\n\t\033[93mNOTICE\033[0m\n")
    print("\tThis repository has moved:\n")
    print(f"\t{response['redirect']}\n")
    print("\tPlease update your remote.\n\n")
    sys.exit(128)
elif r.status_code == 200:
    os.environ["SRHT_PUSH_CTX"] = r.text
    log("Executing {}", " ".join(cmd))
    sys.stderr.close()
    os.execvp(cmd[0], cmd)
else:
    if "why" in response:
        print(response["why"])
    sys.exit(128)
