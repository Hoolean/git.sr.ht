#!/usr/bin/env python3
import json
import os
import sys
# TEMP
sys.path.append('/home/sircmpwn/sources/git.sr.ht')
sys.path.append('/home/sircmpwn/sources/scm.sr.ht')
from srht.config import cfg
from configparser import ConfigParser
from datetime import datetime, timedelta
from gitsrht.submit import do_post_update
from scmsrht.redis import redis

op = sys.argv[0]
origin = cfg("git.sr.ht", "origin")

if op == "hooks/update":
    # Stash updated refs for later processing
    refname = sys.argv[1]
    old = sys.argv[2]
    new = sys.argv[3]

    push_uuid = os.environ.get("SRHT_PUSH")
    if not push_uuid:
        sys.exit(0)
    redis.setex(f"update.{push_uuid}.{refname}",
            timedelta(minutes=10), f"{old}:{new}")

if op == "hooks/post-update":
    refs = sys.argv[1:]

    config = ConfigParser()
    with open("config") as f:
        config.read_file(f)

    repo_id = config.get("srht", "repo-id")
    if not repo_id:
        sys.exit(0)
    repo_id = int(repo_id)

    context = json.loads(os.environ.get("SRHT_PUSH_CTX"))
    repo = context["repo"]

    if repo["visibility"] == "autocreated":
        print("\n\t\033[93mNOTICE\033[0m")
        print("\tWe saved your changes, but this repository does not exist.")
        print("\tClick here to create it:")
        print("\t{}/create?name={}".format(origin, repo["name"]))
        print("\tYour changes will be discarded in 20 minutes.\n")

    do_post_update(context, refs)
